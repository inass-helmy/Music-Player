{"version":3,"sources":["components/playlist/playlist.js","components/player/player.js","components/player/controls.js","components/nowPlaying/nowPlaying.js","containers/App.js","serviceWorker.js","index.js"],"names":["Playlist","title","src","id","playSong","color","artist","className","style","backgroundColor","onClick","clickHandler","Player","props","isPlaying","playFirstSong","firstSong","pauseSong","togglePlaying","resumeSong","isClicked","seek","moveBar","duration","playNext","playPrevious","playPauseSwitch","selector","React","createRef","aria-hidden","url","ref","value","max","e","rect","current","getBoundingClientRect","percentage","clientX","left","offsetWidth","NowPlaying","nowPlayingSong","description","userName","songName","song","App","stop","unload","data","state","temp","filter","currentIndex","findIndex","console","log","setState","currentSrc","displayList","Howl","html5","onload","onplay","this","setInterval","Math","round","bind","onend","playNextSong","play","nextSong","length","playPreviousSong","previousSong","pause","position","isLoaded","shuffled","shuffledList","fetch","headers","accept","then","res","json","map","upload_name","upload_id","files","download_url","upload_description_plain","user_name","colors","display","index","key","songDuration","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uVAsBeA,G,YAnBE,SAAC,GAAiD,IAA/CC,EAA8C,EAA9CA,MAAOC,EAAuC,EAAvCA,IAAKC,EAAkC,EAAlCA,GAAIC,EAA8B,EAA9BA,SAAUC,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,OAKnD,OACE,4BACEC,UAAU,WACVC,MAAO,CAAEC,gBAAiBJ,GAC1BK,QAAS,kBARQ,SAACR,EAAKC,GACzBC,EAASF,EAAKC,GAOGQ,CAAaT,EAAKC,KAEjC,wBAAII,UAAU,aACXN,EACD,6BACA,0BAAMM,UAAU,UAAUD,OC0CnBM,G,MAvDA,SAAAC,GAAU,IAErBC,EAYED,EAZFC,UACAC,EAWEF,EAXFE,cACAC,EAUEH,EAVFG,UACAC,EASEJ,EATFI,UACAC,EAQEL,EARFK,cACAC,EAOEN,EAPFM,WACAC,EAMEP,EANFO,UACAC,EAKER,EALFQ,KACAC,EAIET,EAJFS,QACAC,EAGEV,EAHFU,SACAC,EAEEX,EAFFW,SACAC,EACEZ,EADFY,aAGIC,EAAkBZ,ECnBhB,oBADU,mBDqBZa,EAAWC,IAAMC,YAOvB,OACE,yBAAKtB,UAAU,mBACb,4BAAQA,UAAU,aAAaG,QAAS,kBAAMe,MAC5C,uBAAGlB,UC5BE,4BD4BmBuB,cAAY,UAEtC,4BACEvB,UAAU,aACVG,QAAS,WAXbQ,IACAJ,EAAYG,IAAcG,EAAYD,IAAeJ,EAAcC,EAAUe,IAAKf,EAAUb,MAcxF,uBAAGI,UAAWmB,EAAiBI,cAAY,UAE7C,4BAAQvB,UAAU,aAAaG,QAAS,kBAAMc,MAC5C,0BAAMjB,UCxCL,2BDwCsBuB,cAAY,UAErC,8BACEE,IAAKL,EACLpB,UAAU,SACV0B,MAAOZ,EACPa,IAAKX,EACLb,QAAS,SAAAyB,GACP,IAAIC,EAAOT,EAASU,QAAQC,wBACxBC,GAAcJ,EAAEK,QAAUJ,EAAKK,MAAQd,EAASU,QAAQK,YAC5DpB,EAAqB,IAAbiB,SEnCHI,G,MAdI,SAAC,GAA8D,IAA5DtC,EAA2D,EAA3DA,MAA8BuC,GAA6B,EAApDC,YAAoD,EAAvCC,SAAuC,EAA7BF,gBAAgBtC,EAAa,EAAbA,OAClE,OACE,yBAAKC,UAAU,kBAAkBC,MAAO,CAAEC,gBAAiBJ,IACzD,wBAAIE,UAAU,aACXqC,EAAeG,SAChB,6BACA,0BAAMxC,UAAU,UAAUD,IAG5B,uBAAGC,UAAU,aAAaqC,EAAeC,gB,OCL3CG,EAAO,KA8LIC,E,YA5Lb,WAAYpC,GAAQ,IAAD,8BACjB,4CAAMA,KAuCRT,SAAW,SAACF,EAAKC,GAEH,MAAR6C,IACFA,EAAKE,OACLF,EAAKG,SACLH,EAAO,MALa,IAOdI,EAAS,EAAKC,MAAdD,KACFE,EAAOF,EAAKG,QAAO,SAAAP,GAAI,OAAIA,EAAK7C,KAAOA,KACvCqD,EAAeJ,EAAKK,WAAU,SAAAT,GAAI,OAAIA,EAAK7C,KAAOA,KACxDuD,QAAQC,IAAI,QAASH,GACrB,EAAKI,SAAS,CACZJ,eACAK,WAAY3D,EACZY,WAAW,EACXM,WAAW,EACX0C,YAAaR,KAEfN,EAAO,IAAIe,OAAK,CACd7D,MACA8D,OAAO,EACPC,OAAQ,WACN,EAAKL,SAAS,CAAErC,SAAUyB,EAAKzB,cAEjC2C,OAAQ,WAAY,IAAD,OACjBC,KAAKP,SAAS,CAAEvC,KAAM2B,EAAK3B,SAC3B+C,aAAY,WACV,EAAKR,SAAS,CAAEvC,KAAMgD,KAAKC,MAAMtB,EAAK3B,QAAU,OAC/C,MACHkD,KALM,gBAMRC,MAAO,WACLL,KAAKM,gBACLF,KAFK,mBAIJG,QA1EY,EA6EnBD,aAAe,WACb,EAAKb,SAAS,CAAEvC,KAAM,IADH,MAEY,EAAKgC,MAA5BG,EAFW,EAEXA,aAAcJ,EAFH,EAEGA,KAChBuB,EAAWnB,IAAiBJ,EAAKwB,OAAS,EAAIxB,EAAK,GAAKA,EAAKI,EAAe,GAClF,EAAKpD,SAASuE,EAAS5C,IAAK4C,EAASxE,KAjFpB,EAoFnB0E,iBAAmB,WACjB,EAAKjB,SAAS,CAAEvC,KAAM,IADC,MAEQ,EAAKgC,MAA5BG,EAFe,EAEfA,aAAcJ,EAFC,EAEDA,KAChB0B,EAAgC,IAAjBtB,EAAqBJ,EAAKA,EAAKwB,OAAS,GAAKxB,EAAKI,EAAe,GACtF,EAAKpD,SAAS0E,EAAa/C,IAAK+C,EAAa3E,KAxF5B,EA2FnBc,UAAY,WACN,EAAKoC,MAAMvC,WACbkC,EAAK+B,SA7FU,EAiGnB7D,cAAgB,WACd,EAAK0C,SAAS,CACZ9C,WAAY,EAAKuC,MAAMvC,aAnGR,EAuGnBK,WAAa,WACX6B,EAAK0B,QAxGY,EA2GnBpD,QAAU,SAAA0D,GAAa,IACbzD,EAAa,EAAK8B,MAAlB9B,SACR,EAAKqC,SAAS,CACZvC,KAAO2D,EAAWzD,EAAY,MAEhCyB,EAAK3B,KAAM2D,EAAWzD,EAAY,MA9GlC,EAAK8B,MAAQ,CACX4B,UAAU,EACVnE,WAAW,EACXM,WAAW,EACX8D,UAAU,EACV7D,KAAM,EACNE,SAAU,EACViC,aAAc,EACdR,KAAM,CAAE7C,GAAI,EAAG4C,SAAU,GAAIhB,IAAK,GAAIc,YAAa,GAAIvC,OAAQ,IAC/D8C,KAAM,GACNU,YAAa,GACbqB,aAAc,IAbC,E,iFAiBE,IAAD,OAClBC,MACE,0FACA,CACEC,QAAS,CAAEC,OAAQ,sBAGpBC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAE,GACJ/B,QAAQC,IAAI8B,GACZ,IAAMrC,EAAOqC,EAAKC,KAAI,SAAA1C,GACpB,MAAO,CACLD,SAAUC,EAAK2C,YACfxF,GAAI6C,EAAK4C,UACT7D,IAAKiB,EAAK6C,MAAM,GAAGC,aACnBjD,YAAaG,EAAK+C,yBAClBzF,OAAQ0C,EAAKgD,cAGjB,EAAKpC,SAAS,CAAEqB,UAAU,EAAM7B,c,+BA+E5B,IAAD,OACD6C,EAAS,CACb,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAXK,EAsBH9B,KAAKd,MARPD,EAdK,EAcLA,KACAhC,EAfK,EAeLA,UACA0C,EAhBK,EAgBLA,YACAmB,EAjBK,EAiBLA,SACAnE,EAlBK,EAkBLA,UACAO,EAnBK,EAmBLA,KACAE,EApBK,EAoBLA,SACAiC,EArBK,EAqBLA,aAEI0C,EAAU9E,GAAa6D,EAAWnB,EAAcV,EAEtD,OACEe,KAAKd,MAAM4B,UACT,yBAAK1E,UAAU,aACb,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,YACb,wBAAIA,UAAU,SAAd,yBACC2F,EAAQR,KAAI,SAAC1C,EAAMmD,GAClB,OACE,kBAAC,EAAD,CACEC,IAAKpD,EAAK7C,GACVD,IAAK8C,EAAKjB,IACV9B,MAAO+C,EAAKD,SACZ5C,GAAI6C,EAAK7C,GACTG,OAAQ0C,EAAK1C,OACbF,SAAU,EAAKA,SACfC,MAAO4F,EAAOE,UAKpB/E,GAAaN,IACb,yBAAKP,UAAU,eACb,wBAAIA,UAAU,SAAd,eACC,kBAAC,EAAD,CAAYqC,eAAgBQ,EAAKI,GAAenD,MAAO4F,EAAOzC,OAIrE,kBAAC,EAAD,CACExC,UAAWoC,EAAK,GAChBrC,cAAeoD,KAAK/D,SACpBe,WAAYgD,KAAKhD,WACjBF,UAAWkD,KAAKlD,UAChBH,UAAWA,EACXM,UAAWA,EACXF,cAAeiD,KAAKjD,cACpBG,KAAMA,EACNE,SAAUA,EACVD,QAAS6C,KAAK7C,QACd+E,aAAchC,KAAKC,MAAM/C,GACzBC,SAAU2C,KAAKM,aACfhD,aAAc0C,KAAKU,wB,GArLbyB,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,MAAK,SAAA4B,GACjCA,EAAaC,kB","file":"static/js/main.3782aaf9.chunk.js","sourcesContent":["import React from 'react';\nimport './playlist.css';\n\nconst Playlist = ({ title, src, id, playSong, color, artist }) => {\n  const clickHandler = (src, id) => {\n    playSong(src, id);\n  };\n\n  return (\n    <button\n      className=\"song-btn\"\n      style={{ backgroundColor: color }}\n      onClick={() => clickHandler(src, id)}\n    >\n      <h2 className=\"song-name\">\n        {title}\n        <br />\n        <span className=\"artist\">{artist}</span>\n      </h2>\n    </button>\n  );\n};\nexport default Playlist;\n","import React from 'react';\nimport './player.css';\nimport { play, pause, next, previous } from './controls';\n\nconst Player = props => {\n  const {\n    isPlaying,\n    playFirstSong,\n    firstSong,\n    pauseSong,\n    togglePlaying,\n    resumeSong,\n    isClicked,\n    seek,\n    moveBar,\n    duration,\n    playNext,\n    playPrevious\n  } = props;\n\n  const playPauseSwitch = isPlaying ? pause : play;\n  const selector = React.createRef();\n\n  const switchPlayPause = () => {\n    togglePlaying();\n    isPlaying ? pauseSong() : isClicked ? resumeSong() : playFirstSong(firstSong.url, firstSong.id);\n  };\n\n  return (\n    <div className=\"player-controls\">\n      <button className=\"player-btn\" onClick={() => playPrevious()}>\n        <i className={previous} aria-hidden=\"true\"></i>\n      </button>\n      <button\n        className=\"player-btn\"\n        onClick={() => {\n          switchPlayPause();\n        }}\n      >\n        <i className={playPauseSwitch} aria-hidden=\"true\"></i>\n      </button>\n      <button className=\"player-btn\" onClick={() => playNext()}>\n        <span className={next} aria-hidden=\"true\"></span>\n      </button>\n      <progress\n        ref={selector}\n        className=\"slider\"\n        value={seek}\n        max={duration}\n        onClick={e => {\n          var rect = selector.current.getBoundingClientRect();\n          var percentage = (e.clientX - rect.left) / selector.current.offsetWidth;\n          moveBar(percentage * 100);\n        }}\n      ></progress>\n    </div>\n  );\n};\n\nexport default Player;\n","export const play = 'fa fa-play fa-lg',\n  pause = 'fa fa-pause fa-lg',\n  next = 'fa fa-step-forward fa-lg',\n  previous = 'fa fa-step-backward fa-lg',\n  shuffle = 'fa fa-random fa-lg',\n  volume = 'fa fa-volume-up fa-lg',\n  mute = 'fa fa-volume-off fa-lg';\n","import React from 'react';\nimport './nowPlaying.css';\n\nconst NowPlaying = ({ color, description, userName, nowPlayingSong, artist }) => {\n  return (\n    <div className=\"nowplaying-song\" style={{ backgroundColor: color }}>\n      <h2 className=\"song-name\">\n        {nowPlayingSong.songName}\n        <br />\n        <span className=\"artist\">{artist}</span>\n      </h2>\n\n      <p className=\"song-info\">{nowPlayingSong.description}</p>\n    </div>\n  );\n};\n\nexport default NowPlaying;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Playlist from '../components/playlist/playlist';\nimport Player from '../components/player/player';\nimport NowPlaying from '../components/nowPlaying/nowPlaying';\nimport { Howl } from 'howler';\n\nlet song = null;\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoaded: false,\n      isPlaying: false,\n      isClicked: false,\n      shuffled: false,\n      seek: 0,\n      duration: 0,\n      currentIndex: 0,\n      song: { id: 0, songName: '', url: '', description: '', artist: '' },\n      data: [],\n      displayList: [],\n      shuffledList: []\n    };\n  }\n\n  componentDidMount() {\n    fetch(\n      'http://ccmixter.org/api/query?f=json&datasource=topics&type=artist_qa&u=victor&limit=10',\n      {\n        headers: { accept: 'application/json' }\n      }\n    )\n      .then(res => res.json())\n      .then(json => {\n        console.log(json);\n        const data = json.map(song => {\n          return {\n            songName: song.upload_name,\n            id: song.upload_id,\n            url: song.files[0].download_url,\n            description: song.upload_description_plain,\n            artist: song.user_name\n          };\n        });\n        this.setState({ isLoaded: true, data });\n      });\n  }\n\n  playSong = (src, id) => {\n    //check if song is null, if not stop previous song and unload it\n    if (song != null) {\n      song.stop();\n      song.unload();\n      song = null;\n    }\n    const { data } = this.state;\n    const temp = data.filter(song => song.id !== id);\n    const currentIndex = data.findIndex(song => song.id === id);\n    console.log('index', currentIndex);\n    this.setState({\n      currentIndex,\n      currentSrc: src,\n      isPlaying: true,\n      isClicked: true,\n      displayList: temp\n    });\n    song = new Howl({\n      src,\n      html5: true,\n      onload: () => {\n        this.setState({ duration: song.duration() });\n      },\n      onplay: function() {\n        this.setState({ seek: song.seek() });\n        setInterval(() => {\n          this.setState({ seek: Math.round(song.seek() || 0) });\n        }, 1000);\n      }.bind(this),\n      onend: function() {\n        this.playNextSong();\n      }.bind(this)\n    });\n    song.play();\n  };\n\n  playNextSong = () => {\n    this.setState({ seek: 0 });\n    const { currentIndex, data } = this.state;\n    const nextSong = currentIndex === data.length - 1 ? data[0] : data[currentIndex + 1];\n    this.playSong(nextSong.url, nextSong.id);\n  };\n\n  playPreviousSong = () => {\n    this.setState({ seek: 0 });\n    const { currentIndex, data } = this.state;\n    const previousSong = currentIndex === 0 ? data[data.length - 1] : data[currentIndex - 1];\n    this.playSong(previousSong.url, previousSong.id);\n  };\n\n  pauseSong = () => {\n    if (this.state.isPlaying) {\n      song.pause();\n    }\n  };\n\n  togglePlaying = () => {\n    this.setState({\n      isPlaying: !this.state.isPlaying\n    });\n  };\n\n  resumeSong = () => {\n    song.play();\n  };\n\n  moveBar = position => {\n    const { duration } = this.state;\n    this.setState({\n      seek: (position * duration) / 100\n    });\n    song.seek((position * duration) / 100);\n  };\n\n  render() {\n    const colors = [\n      '#581845',\n      '#900c3f',\n      '#c70039',\n      '#c0392b',\n      '#900c3f',\n      '#58355e',\n      '#cc0000',\n      '#f4511e',\n      '#c0392b',\n      '#c70039'\n    ];\n    const {\n      data,\n      isClicked,\n      displayList,\n      isLoaded,\n      isPlaying,\n      seek,\n      duration,\n      currentIndex\n    } = this.state;\n    const display = isClicked && isLoaded ? displayList : data;\n\n    return (\n      this.state.isLoaded && (\n        <div className=\"container\">\n          <div className=\"audio-tracks\">\n            <div className=\"playlist\">\n              <h4 className=\"title\">AVAILABLE SOUNDTRACKS</h4>\n              {display.map((song, index) => {\n                return (\n                  <Playlist\n                    key={song.id}\n                    src={song.url}\n                    title={song.songName}\n                    id={song.id}\n                    artist={song.artist}\n                    playSong={this.playSong}\n                    color={colors[index]}\n                  />\n                );\n              })}\n            </div>\n            {(isClicked || isPlaying) && (\n              <div className=\"now-playing\">\n                <h4 className=\"title\">NOW PLAYING</h4>\n                {<NowPlaying nowPlayingSong={data[currentIndex]} color={colors[currentIndex]} />}\n              </div>\n            )}\n          </div>\n          <Player\n            firstSong={data[0]}\n            playFirstSong={this.playSong}\n            resumeSong={this.resumeSong}\n            pauseSong={this.pauseSong}\n            isPlaying={isPlaying}\n            isClicked={isClicked}\n            togglePlaying={this.togglePlaying}\n            seek={seek}\n            duration={duration}\n            moveBar={this.moveBar}\n            songDuration={Math.round(duration)}\n            playNext={this.playNextSong}\n            playPrevious={this.playPreviousSong}\n          />\n        </div>\n      )\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}